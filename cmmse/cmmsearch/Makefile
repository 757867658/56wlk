###########################################################################
# Automatically generated by pgmake (1.0.1)  							  #
###########################################################################

#################设计系统参数#######################################
WORKROOT	?=	../
IDLCC	:=	$(WORKROOT)/libsource4/idlcompiler/output/bin/mcy
RPCCC :=  $(WORKROOT)/public/ubrpc/output/bin/ubrpcgen
CC	:=	gcc
CXX	:=	g++
LEX	:=	flex
YACC	:= yacc
CFLAGS	:=	-pipe  -W -g -fPIC
CXXFLAGS	:=	-pipe  -W -g -fPIC -Wno-unused-function
LEXFLAGS	:=	
YACCFLAGS	:=	
IDLFLAGS	:=  
LINKFLAGS	:=  -rdynamic
LINK	:=	g++
AR	:=	ar cqs
RANLIB	:=	
COMAKE	:=	pgmake

###############panguso lib 的32位 64位支持#################
HARDWARE_PLATFORM := $(shell uname -m)
ifeq ($(HARDWARE_PLATFORM),x86_64)
	lib2=lib2-64
	third=third-64
else
	lib2=lib2
	third=third
endif
##########################################

# 编译参数
DEP_INCPATH =  -I$(WORKROOT)/lab/libsource4/configure/output//include/ -I$(WORKROOT)/lab/libsource4/odict/output//include/ -I$(WORKROOT)/lab/libsource4/spreg/output//include/ -I$(WORKROOT)/lab/libsource4/bsl/output//include/ -I$(WORKROOT)/lab/libsource4/ans/output//include/ -I$(WORKROOT)/lab/libsource4/others-ex/output//include/ -I$(WORKROOT)/lab/libsource4/dict/output//include/ -I$(WORKROOT)/lab/libsource4/nsfelt/output//include/ -I$(WORKROOT)/lab/libsource4/ullib/output//include/ -I$(WORKROOT)/lab/libsource4/fileblock/output//include/ -I$(WORKROOT)/lab/libsource4/idlcompiler/output//include/ -I$(WORKROOT)/lab/libsource4/mynet/output//include/ -I$(WORKROOT)/lab/libsource4/mcpack/output//include/ -I$(WORKROOT)/lab/libsource4/uconv/output//include/ -I$(WORKROOT)/lab/libsource4/ccode/output//include/ -I$(WORKROOT)/lab/libsource4/connectpool/output// -I$(WORKROOT)/lab/libsource4/ub/output//include/ -I$(WORKROOT)/lab/libsource4/nshead/output//include/ -I$(WORKROOT)/lab/libsource4/cache/output//include/ -I$(WORKROOT)/lab/libsource4/boost/output//include/
DEP_LDFLAGS =  -L$(WORKROOT)/lab/libsource4/idlcompiler/output//lib/ -L$(WORKROOT)/lab/libsource4/ans/output// -L$(WORKROOT)/lab/libsource4/odict/output// -L$(WORKROOT)/lab/libsource4/ullib/output//lib/ -L$(WORKROOT)/lab/libsource4/boost/output//lib/ -L$(WORKROOT)/lab/libsource4/cache/output//lib/ -L$(WORKROOT)/lab/libsource4/mynet/output// -L$(WORKROOT)/lab/libsource4/configure/output//lib/ -L$(WORKROOT)/lab/libsource4/bsl/output//lib/ -L$(WORKROOT)/lab/libsource4/uconv/output// -L$(WORKROOT)/lab/libsource4/mcpack/output//lib/ -L$(WORKROOT)/lab/libsource4/spreg/output//lib/ -L$(WORKROOT)/lab/libsource4/ub/output//lib/ -L$(WORKROOT)/lab/libsource4/fileblock/output// -L$(WORKROOT)/lab/libsource4/dict/output//lib/ -L$(WORKROOT)/lab/libsource4/ccode/output//lib/ -L$(WORKROOT)/lab/libsource4/others-ex/output//lib/ -L$(WORKROOT)/lab/libsource4/connectpool/output// -L$(WORKROOT)/lab/libsource4/nshead/output// -L$(WORKROOT)/lab/libsource4/nsfelt/output//lib/
DEP_LDLIBS = -lmcache -lmynet -lboost_wserialization -lboost_regex -lboost_date_time -lboost_filesystem -lboost_thread -lboost_test_exec_monitor -lboost_serialization -lboost_wave -lboost_python -lboost_signals -lboost_program_options -lboost_prg_exec_monitor -lboost_unit_test_framework -lboost_iostreams -lconnectpool -luconv -lulccode -lfileblock -luldict -lodict -lfelt -lullib_ex -lmcpack -lconfig -lmcpack_idl -lnshead -lullib -lbsl_btree -lbsl -lbsl_ResourcePool -lbsl_utils -lbsl_archive -lbsl_pool -lbsl_check_cast -lbsl_exception -lbsl_var -lbsl_var_utils -lbsl_var_implement -lspreg -lub_log -lub_client -lub_server -lub -lub_conf -lub_misc
INCPATH =  -I. -I./core -I./helper -I./lib/utils -I./include
MAKDEP = Makefile.dep


#start target
first : all

############# 默认推到公式
.SUFFIXES: .c .cpp .cc .cxx .C .idl .des
.PRECIOUS: %.cpp

.cpp.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.cc.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.cxx.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.C.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.c.o:
	$(CC) -c -o $@ $<  $(CFLAGS) $(CPPFLAGS) $(INCPATH)

.idl.cpp:
	$(IDLCC) --ns=$(*F) -o $* $< $(CPPFLAGS) $(INCPATH) $(IDLFLAGS)

#############
###cpp 支持
%info : %
	ccp $<
#############


#__$MAKEFILE_RULES$__



###############编译目标
all :  target output 
.PHONY : all clean test output pgmake src conf 

target : cmmsearch 
#target : rpcidl cmmsearch 
#target : 
#__$target_CMDLINE$__

rpcidl : 

clean_rpcidl : 


test : 


pgmake :
	-make clean
	-pgmake 

#-include $(MAKDEP)
-include $(MAKDEP)

#----------------build target : cmmsearch--------------------

cmmsearch : CC := gcc
cmmsearch : CXX := g++
cmmsearch : CXXFLAGS :=  -pipe  -W -g -fPIC -Wno-unused-function
cmmsearch : CPPFLAGS := -DVERSION=\"1.0.0.0\" -DPROJNAME=\"cmmsearch\" -g -finline-functions  -Winline -pipe -DHASH_THREAD_SAFE -D_XOPEN_SOURE=500 -D_GNU_SOURCE
cmmsearch : IDLFLAGS := 
cmmsearch : CFLAGS :=  -pipe  -W -g -fPIC
cmmsearch : INCPATH :=  -I. -I./core -I./helper -I./lib/utils -I./include $(DEP_INCPATH)
cmmsearch : LDLIBS := -lcrypto -lm -lpthread -L ./helper/ -ltshelper -L ./core/ -ltscore -L ./lib/ -lbcommand -L ./lib/ -lutils -lpthread -lcrypto -lrt -rdynamic $(DEP_LDLIBS)
cmmsearch : LDFLAGS :=  $(DEP_LDFLAGS)
cmmsearch : LINKFLAGS := -rdynamic

cmmsearch_SOURCES := $(wildcard pgmake_autogen.cpp op_query.cpp op_data.cpp op_file_update.cpp op_update.cpp main.cpp op_ontime.cpp)
#cmmsearch_HEADERS := $(wildcard *.h *.hpp)
cmmsearch_HEADERS := *.h *.hpp
cmmsearch_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
cmmsearch_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(cmmsearch_IDLSRC))
cmmsearch_IDLSRCH := $(patsubst %.idl,%.h, $(cmmsearch_IDLSRC))
cmmsearch_CONFDES := $(wildcard __$CONFDES$_VALUE$__ cmmsearch.des)
cmmsearch_CONFRANGE := $(patsubst %.des,%.range, $(cmmsearch_CONFDES))
cmmsearch_OBJS := $(cmmsearch_IDLSRC:.idl=.o)
cmmsearch_OBJS += $(cmmsearch_SOURCES:.c=.o)
cmmsearch_OBJS := $(cmmsearch_OBJS:.cc=.o)
cmmsearch_OBJS := $(cmmsearch_OBJS:.cpp=.o)
cmmsearch_OBJS := $(cmmsearch_OBJS:.cxx=.o)
cmmsearch_OBJS := $(cmmsearch_OBJS:.C=.o)
cmmsearch_OBJS := $(cmmsearch_OBJS:.idl=.o)
cmmsearch_OBJS := $(cmmsearch_OBJS:.yacc=.o)
cmmsearch_OBJS := $(cmmsearch_OBJS:.lex=.o)
cmmsearch : $(cmmsearch_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(cmmsearch_CONFDES);do cpp -C -o cmmsearch.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp cmmsearch.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define cmmsearch_output
	mkdir -p output
	mkdir -p output/bin
	mkdir -p output/modules
	mkdir -p output/data
	cp -rf cmmsearch output/bin
	`if [ -e "scripts/mk_env.sh" ];then cp -rf scripts/mk_env.sh output/ ;chmod +x output/mk_env.sh;fi`
	`if [ -e "scripts/start.sh" ];then cp -rf scripts/start.sh output/ ;chmod +x output/start.sh;fi`
	`if [ -e "scripts/deploy.sh" ];then cp -rf scripts/deploy.sh ./ ;chmod +x ./deploy.sh;fi`

	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

	`if [ -e "cmd" ];then cp -rf cmd output/ ;fi`

	`if [ -e "modules" ];then cp -rf modules/output/lib/*.so output/modules ;fi`

	`if [ -e "data" ];then cp -rf data output/ ;fi`


endef
	

define cmmsearch_clean
	-rm -rf $(cmmsearch_OBJS) $(cmmsearch_IDLSRCCPP) $(cmmsearch_IDLSRCH) cmmsearch.range conf/cmmsearch.range
	-rm -rf cmmsearch
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define cmmsearch_ccpc
	ccp $(cmmsearch_SOURCES) --formatter vim
endef
	

define cmmsearch_cov
	
endef
	



#---------------------end build target : cmmsearch------------------

define _output
	$(cmmsearch_output)
endef
	

define _clean
	$(cmmsearch_clean)
endef
	

ccpc : 
	$(cmmsearch_ccpc)

cov : 
	cov01 -1
	make clean
	make 
	cov01 -0



output : cmmsearch 
	make -C helper
	make -C core
	$(_output)
	rm -rf $(MAKDEP)

$(MAKDEP) : $(wildcard pgmake_autogen.cpp op_query.cpp op_data.cpp op_file_update.cpp op_update.cpp main.cpp op_ontime.cpp)
	-$(CC) -MG -MM $(CPPFLAGS) $(INCPATH) $(DEP_INCPATH) $^ > $@

clean:
	$(_clean)
	rm -rf $(MAKDEP)


